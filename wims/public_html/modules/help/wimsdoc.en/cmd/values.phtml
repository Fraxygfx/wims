!! +var+ +exec+ +string+
$lst_tit values$lst_titend$type_both
  $(lst_syntax)values $emph fns$emphend for $emph v$emphend=$emph v1$emphend
  to $emph v2$emphend [step $emph st $emphend], or <br/>
$ !values $emph fns$emphend for $emph v$emphend in 
  $emph v1,v2,v3,...$emphend</tt>
  $lst_mean Outputs a list of values of $emph fns$emphend with 
  variable $emph v $emphend replaced successively by values $emph v1$emphend,
  ..., $emph v2$emphend. <p>
  In the second syntax, the values are given with respect to each item in
  the list $emph v1,v2,...$emphend. <p>
  $emph fns$emphend may be a comma-separated list of functions. <p>
  This command can also be used to make recursions. If the functions
  $emph fns$emphend contain a variable named $emph last$emphend, this variable
  will take the value of the last step each time. And the starting value
  can be put into the WIMS variable <tt>$$recursion_start</tt>.
  </p>
