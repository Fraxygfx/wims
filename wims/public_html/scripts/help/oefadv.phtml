!set special_list=imagefill,expandlines,rename,help,tooltip

!if $lang=cn
!set special_list=imagefill,expandlines,help

<p><center><h2>OEF的高级技巧</h2></center>

<h3>隐藏图形名称</h3>
如果你的练习需要识别随机选取的图形, 图形文件名就是一个重要的提示.
为了隐藏此文件名, 你可以写

<pre>\img{\imagedir/picture.jpg align=middle alt="picture"}</pre>

这样学生在浏览器里看到的是

<pre>&lt;img src="a_random_unrelated_file_name" align=middle alt="picture"&gt;</pre>

真实文件名被隐藏了.

<p><b>注意</b>. 不要直接使用WIMS命令 <em>rename</em> 处理文件名,
否则练习将不能在被保存的环境里正常工作.

<h3>分步练习</h3>
分步练习可通过命令 <tt>\steps</tt> 定义. 举例来说, 如果你定义 

<pre>\steps{choice 1, reply 1
choice 2, reply 2, reply 3
choice 3
}</pre>

此练习将分成3步, 第一步要求多重选择(choice 1)以及自由格式的回答(reply 1), 
第2步是一个多重选择以及两个自由格式的回答的回答, 等等.
<p>
<tt>\steps</tt> 的内容接受(前面已定义的)参数以及条件定义, 
正如对参数的定义一样. 这样就使得你可以选择性地展示回答栏(根据参数的随机变量),
甚至只含一步的情形也是如此.
<p>
请注意, 如果用户在前面的步骤里出了错, 以后的步骤就不出现了(可以认为全都错了).
<p>
在练习的陈述里, 当前的步数可通过变量 <tt>\step</tt> 获得,
此变量随着用户回答的进展而逐步取值 1,2,...
<p>
为了设计动态的分步练习(步数随用户的回答而发生变化), 
你可以使用命令 <tt>\nextstep{...}</tt>. <tt>\nextstep</tt> 类似于 <tt>\steps</tt>,
但只有第一行是有效的. 它仅当其内容是由这样的变量给出时才能使用,
这个变量应该由 post-reply 的参数定义所改变.
当在某一步时 <tt>\nextstep</tt> 的内容变成空了, 练习就停止了.
<p>
在任何情形, 在一个OEF源码内, 最多只能出现一个 <tt>\steps</tt> 或 
<tt>\nextstep</tt> 的声明.

<h3>条件分叉与循环</h3>

可用的命令:

<pre>
\if{条件}{if的内容}
\if{条件}{if的内容}{其它内容}
\for{var=n1 to n2}{循环内容}
\while{条件}{循环内容}     (只用在主环境)
</pre>

这些命令可以被用于陈述、提示、解答或反馈内, 或用于主环境里.
在最后一种情形, 条件执行只影响参数的定义.

<a name=special>
<h3>特殊方法</h3></a>

在练习的陈述里利用命令 <tt>\special{...}</tt>
可有下列特殊方法:
<p>
!if $special_parm=all
 !for sp in $special_list
  <p><center><h4>特殊方法<tt>$sp</tt></center></h4> <p>
  一般语法: <tt>\special{$sp <i>参数</i>}</tt> <p>

  !read oef/special/$sp.phtml help
 !next sp
!else
 !for sp in $special_list
  !href cmd=help&special_parm=oefadv&special_parm2=$sp#special $sp
  &nbsp;
 !next sp
!endif

!if $special_parm2 isitemof $special_list
<p><center><h4>特殊方法<tt>$special_parm2</tt></center></h4> <p>
一般语法: <tt>\special{$special_parm2 <i>参数</i>}</tt> <p>

!read oef/special/$special_parm2.phtml help
!endif

<h3>预处理资源</h3>

本功能不能用于Createxo. 你可在模块工具(Modtool)下使用它来写OEF(及Deductio)练习.
<p>
它使你可以把源码的公共部分包含在几个oef文件里.
你也可以利用它从一个预资源批生成几个oef, 它们相互之间相差一些宏定义.
<p>
为使用这个功能, 应在 src 下建立一个子目录 cpp/. 
预资源文件以 .cpp 作为后缀放入此子目录. 在这些文件里,
你可以加入 cpp 的指令如 <tt>#include</tt> 或 <tt>#if</tt>. 
(请参看 cpp 手册或 c 的说明以了解语法详情.)
<p>
cpp文件的第一行应该定义一个目标表, 其格式为
<pre>
target=targ1 targ2 targ3 ...
</pre>
这行命令的意义是本cpp文件将生成 targ1.oef, targ2.org, 等等.
(输出文件会自动添加后缀 .oef). 在生成目标文件 <em>targ1</em> 时, 
谓词 <tt>#TARGET</tt> 会被定义为 <em>targ1</em>. (而且宏
<em>TARGET_targ1</em> 也被定义.)
所以在cpp原文件里可以加入如下的行:
<pre>
#if #TARGET (targ1)
 \title{练习1}
 \integer{v1=3}
 \text{t1=这是target 1}
#endif
#if #TARGET (targ2)
 \title{练习2}
 \integer{v1=5}
 \text{t1=这是target 2}
#endif
</pre>
使得生成的内容与目标有关.
<p>
包含文件也应加上后缀 .inc 后放到 src/cpp 目录里. 命令行
<pre>
#include "common.inc"
</pre>
将把 common.inc 的内容插入生成的oef文件里.
请注意, 为了安全的原因, 禁止指明包含文件的目录.
<p>
特别提示; 如果你的cpp文件的文本里含有未关闭的单引号或双引号的话,
cpp会陷于混乱. 在这种情形, 
你可以利用 c 的注解(<tt>/* ... */</tt>)把含有这样文本的命令保护起来.

<h3>练习环境</h3>
特殊变量 <tt>\oefenv</tt> 可用来测试练习的环境(如果在练习里没有对它重定义的话).
<p>
目前此变量能测试的内容只有
``debug''. 在以下情形里, debug将出现在 <tt>\oefenv</tt> 里:<ol>
<li>当它在Createxo内执行时.
<li>当它在Modtool内被测试时, 目的是为了开发.
<li>当它是班级的练习, 而且被主持教师执行时.
</ol>
在这些情形, 许多类型的输入栏里都会显示正确的答案, 
让你看到练习期望的结果是什么.
<p>
你可以用以下形式在练习里添加纠错信息
<pre>
\if{debug iswordof \oefenv}{欲添加的纠错信息}
</pre>
当练习被测试时, 这些信息会自动显示, 而且学生做作业时又自动隐藏.
!exit
!endif

!set special_list=imagefill,expandlines,help

<p><center><h2>Advanced features of OEF</h2></center>

<h3>Hiding image names</h3>
If your exercise requires recognition of a randomly picked picture, the file
name of the picture might give clue to the exercise. In order to hide this
file name, you can write

<pre>\img{\imagedir/picture.jpg align=middle alt="picture"}</pre>

Then on the browser, the student will see

<pre>&lt;img src="a_random_unrelated_file_name" align=middle alt="picture"&gt;</pre>

The true file name is thus hidden to the student.

<p><b>Note</b>. Don't use directly the WIMS command <em>rename</em> to
process the file name, or the exercise won't work correctly under saved
environment.

<h3>Multi-step exercises</h3>
Multi-step exercises can be defined via the command <tt>\steps</tt>. For
example, if you define (among parameters)

<pre>\steps{choice 1, reply 1
choice 2, reply 2, reply 3
choice 3
}</pre>

the exercise will be presented with 3 steps, the first asks for a multiple
choice (choice 1) and a freestyle reply (reply 1), the second a multiple
choice and two freestyle replies, etc.
<p>
The content of <tt>\steps</tt> accepts (earlier-defined) parameters as well as
conditional definitions, in the same way as the definition of parameters.
This allows you to selectively present response
fields (according to random variations of parameters), even in the case
where there is only one step.
<p>
It is to be noted that if a user makes a mistake in
an early step, subsequent steps will not be presented (and will be
considered all wrong).
<p>
The current step number is available to the statement of the exercise,
via the variable
<tt>\step</tt> which takes successively the values of 1,2,... when the user
advances in his/her answering.
<p>
To make dynamic multi-step exercises (steps varying with student answers), you
can use the command <tt>\nextstep{...}</tt>. The content of
<tt>\nextstep</tt> is the similar to <tt>\steps</tt> but only the first line
is effective. It is useful only when the content is given by a variable
which is changed by post-reply parameter definitions. The exercise stops when
the content of <tt>\nextstep</tt> is empty at some step.
<p>
In any case, at most one declaration <tt>\steps</tt> or <tt>\nextstep</tt>
should appear in an OEF source.

<h3>Conditional branching and loops</h3>

Available commands:

<pre>
\if{condition}{if_content}
\if{condition}{if_content}{otherwise_content}
\for{var=n1 to n2}{loop_content}
\while{condition}{loop_content}     (main environment only)
</pre>

These commands can be used either within statement, hint, solution or
feedback, or in the main environment. In the latter case, the conditional
execution only affects parameter definitions.

<a name=special>
<h3>Special methods</h3></a>

With the command <tt>\special{...}</tt> in the statement of an exercise, the
following special methods are available:
<p>
!if $special_parm=all
 !for sp in $special_list
  <p><center><h4>The special method <tt>$sp</tt></h4></center> <p>
  General syntax: <tt>\special{$sp <i>parameters</i>}</tt> <p>

  !read oef/special/$sp.phtml help
 !next sp
!else
 !for sp in $special_list
  !href cmd=help&special_parm=oefadv&special_parm2=$sp#special $sp
  &nbsp;
 !next sp
!endif

!if $special_parm2 isitemof $special_list
<p><center><h4>The special method <tt>$special_parm2</tt></h4></center> <p>
General syntax: <tt>\special{$special_parm2 <i>parameters</i>}</tt> <p>

!read oef/special/$special_parm2.phtml help
!endif

<h3>Preprocessed sources</h3>

This feature is not available for Createxo. You can use it if you write OEF
(and Deductio) exercises under Modtool.
<p>
It allows you to include common portions of codes into several oef files.
You can also use it to make batch generation of several oefs from one
pre-source, each differing from the others by some macro definitions.
<p>
To use this feature, a subdirectory cpp/ should be created under src. Put
into it pre-source files with extension .cpp. In these files, you can add
cpp directives like <tt>#include</tt> or <tt>#if</tt>. (Please refer to cpp
manual and c specification for details of the syntax.)
<p>
The first line of the cpp file must define a list of targets, in the format
<pre>
target=targ1 targ2 targ3 ...
</pre>
This line means that this cpp file should generate targ1.oef, targ2.org, etc.
(the extension .oef will be
appended to the output names). When generating the target file <em>targ1</em>, the
predicate <tt>#TARGET</tt> will be defined as <em>targ1</em>. (And a macro
<em>TARGET_targ1</em> is also defined.)
Therefore in the cpp source file, you can add lines like
<pre>
#if #TARGET (targ1)
 \title{Exercise 1}
 \integer{v1=3}
 \text{t1=this is target 1}
#endif
#if #TARGET (targ2)
 \title{Exercise 2}
 \integer{v1=5}
 \text{t1=this is target 2}
#endif
</pre>
in order to make the contents target-dependent.
<p>
Include files should also be put into the src/cpp directory, with extension
.inc. And a line
<pre>
#include "common.inc"
</pre>
will insert the content of common.inc into the generated oef file.
Please note that for security reasons, it is prohibited to specify
directories of include files.
<p>
A special remark: cpp gets confused when your file contains single or double
quotes in the text that are not closed. In this case, you can protect the
commands containing such texts by c comments (<tt>/* ... */</tt>).

<h3>Exercise environment</h3>
A special variable <tt>\oefenv</tt> can be used to test the environment of
an exercise (if it is not redefined within the exercise).
<p>
For the time being, the only testable content of the variable is the word
``debug''. This word appears within <tt>\oefenv</tt> in the following
situations: <ol>
<li>When it is executed within Createxo.
<li>When it is under test in Modtool, by the developer himself.
<li>When it is a class exercise and is executed by the supervisor.
</ol>
Note that in these cases, the good reply will appear as default in the input
fields of many types, allowing you to see what the exercise expects without
typing into the fields.
<p>
You may add debugging informations into your exercise using things like
<pre>
\if{debug iswordof \oefenv}{debugging informations to add into}
</pre>
These debugging informations will be automatically shown when the exercise
is under test, and automatically hidden when students work on it.


