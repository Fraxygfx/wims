<p>
!! This file is automatically generated! Do not edit by hand.
Each command takes one line.<p>
In the following table, <tt>[color]</tt>
may be either a color name, or 3 integers between 0 and 255, separated by commas,
for the values of red,green,blue.
<p>$table_header
<caption>Drawing commands</caption>
$table_hdtr<th colspan=5>Name and syntax</th></tr>
$table_hdtr<th colspan=2>Synonymes</th>
<th colspan=3>Meaning</th></tr><tr><td><td colspan=5></td></tr>

$table_tr<td colspan=5 nowrap><tt>affine a,b,c,d,tx,ty</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> Make an affine transformation for the subsequent objets: (x;y) -> [a,b;c,d](x;y)+(tx;ty).</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>animate fra,del,rep</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> This command is only available for WIMS OEF and doc, and MUST appear on the first line. Set up animation for fra frames, with del seconds between frames, and rep repetitions (rep=0 means infinite repetition).<br> Frame control is done via two variables: <tt>animstep</tt> (integer) going from 1 to frame count, and <tt>s</tt> going from 0 to 1.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>animstep n</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> Set up an integer which can be called in any evaluation. Used for animation. Direct use of this command must be avoided under WIMS.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>arc x,y,w,h,a1,a2,[color]</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> Arc segment of an ellipse of width w and hight h centered at (x,y), from angle a1 to angle a2 (in degrees).</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>arrow x1,y1,x2,y2,l,[color]</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> Arrow (x1,y1)--->(x2,y2), where l is the length (in pixels) of arrowhead.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>circle x,y,d,[color]</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> Circle of center (x,y) and diameter d (in pixels).</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>comment</tt></td></tr>
$table_tr<td colspan=2><tt> &nbsp;</tt></td>
<td colspan=3> Does nothing.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>copy x,y,x1,y1,x2,y2,[filename]</tt></td></tr>
$table_tr<td colspan=2><tt> insert&nbsp;</tt></td>
<td colspan=3> Insert the region from (x1,y1) to (x2,y2) (in pixels) of [filename] to (x,y). If x1=y1=x2=y2=-1, the whole [filename] is copied.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>copyresized x1,y1,x2,y2,dx1,dy1,dx2,dy2,[filename]</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> Insert the region from (x1,y1) to (x2,y2) (in pixels) of [filename], possibly resized, to the region of (dx1,dy1) to (dx2,dy2). If x1=y1=x2=y2=-1, the whole [filename] is copied and resized.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>darrow x1,y1,x2,y2,l,[color]</tt></td></tr>
$table_tr<td colspan=2><tt> dasharrow dashedarrow&nbsp;</tt></td>
<td colspan=3> Dashed arrow (x1,y1)- - ->(x2,y2), where l is the length (in pixels) of arrowhead.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>dhline x,y,[color]</tt></td></tr>
$table_tr<td colspan=2><tt> dashedhorizontalline dashhorizontalline hdline horizontaldashedline&nbsp;</tt></td>
<td colspan=3> Dashed horizontal line through (x,y).</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>diamondfill x,y,nx,ny,[color]</tt></td></tr>
$table_tr<td colspan=2><tt> diafill&nbsp;</tt></td>
<td colspan=3> Flood fill the region containing (x,y) with the same original color by double hatching (parallel lines), (nx,ny) being the horizontal and vertical distance between adjacent lines (in pixels).</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>dline x1,y1,x2,y2,[color]</tt></td></tr>
$table_tr<td colspan=2><tt> dashedline dashline&nbsp;</tt></td>
<td colspan=3> Dashed line segment (x1,y1)---(x2,y2).</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>dlines [color],x1,y1,x2,y2,x3,y3...</tt></td></tr>
$table_tr<td colspan=2><tt> dashedlines dashlines&nbsp;</tt></td>
<td colspan=3> n dashed line segments (x1,y1)---(x2,y2)---(x3,y3)...</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>dotfill x,y,nx,ny,[color]</tt></td></tr>
$table_tr<td colspan=2><tt> pointfill diskfill&nbsp;</tt></td>
<td colspan=3> Flood fill the region containing (x,y) with the same original color by (fat) dots at each (nx,ny) pixels.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>dvline x,y,[color]</tt></td></tr>
$table_tr<td colspan=2><tt> dashedverticaline dashverticalline vdline verticaldashedline&nbsp;</tt></td>
<td colspan=3> Dashed vertical line through (x,y).</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>ellipse x,y,w,h,[color]</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> Ellipse with center (x,y), width w and height h.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>fcircle x,y,d,[color]</tt></td></tr>
$table_tr<td colspan=2><tt> ball disk filledcircle&nbsp;</tt></td>
<td colspan=3> Filled circle of center (x,y) and diameter d (in pixels).</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>fellipse x,y,w,h,[color]</tt></td></tr>
$table_tr<td colspan=2><tt> filledellipse&nbsp;</tt></td>
<td colspan=3> Filled ellipse with center (x,y), width w and height h.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>fill x,y,[color]</tt></td></tr>
$table_tr<td colspan=2><tt> flood floodfill&nbsp;</tt></td>
<td colspan=3> Flood fill the region containing (x,y) with the same original color, by color.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>filltoborder x,y,[color1],[color2]</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> Flood fill by color2 the region containing (x,y) and bounded by color1.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>fpoly [color],x1,y1,x2,y2,x3,y3...</tt></td></tr>
$table_tr<td colspan=2><tt> filledpoly filledpolygon fpolygon&nbsp;</tt></td>
<td colspan=3> Filled polygon (x1,y1)-(x2,y2)-(x3,y3)...</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>frect x1,y1,x2,y2,[color]</tt></td></tr>
$table_tr<td colspan=2><tt> filledrect fillecrectangle frectangle&nbsp;</tt></td>
<td colspan=3> Filled rectangle with corners (x1,y1) and (x2,y2).</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>fsquare x,y,s,[color]</tt></td></tr>
$table_tr<td colspan=2><tt> filledsquare&nbsp;</tt></td>
<td colspan=3> Filled square with sides s (in pixels) and first corner at (x,y).</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>ftriangle x1,y1,x2,y2,x3,y3,[color]</tt></td></tr>
$table_tr<td colspan=2><tt> filledtriangle&nbsp;</tt></td>
<td colspan=3> Filled triangle with vertices (x1,y1),(x2,y2),(x3,y3).</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>gridfill x,y,nx,ny,[color]</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> Flood fill the region containing (x,y) with the same original color by a grid of horizontal and vertical lines with distance (nx,ny) (in pixels).</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>hatchfill x,y,nx,ny,[color]</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> Flood fill the region containing (x,y) with the same original color by hatching (parallel lines), (nx,ny) being the horizontal and vertical displacement of adjacent lines (in pixels).</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>hline x,y,[color]</tt></td></tr>
$table_tr<td colspan=2><tt> horizontalline&nbsp;</tt></td>
<td colspan=3> Horizontal line through (x,y).</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>interlace</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> Set interlaced image</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>killaffine</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> Reset affine transformation to identity.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>killbrush</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> Turns off brush selection for line drawing.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>killlinear</tt></td></tr>
$table_tr<td colspan=2><tt> killrotation,killrotate&nbsp;</tt></td>
<td colspan=3> Reset linear transformation to identity.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>killtile</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> Turns off tile selection for filling.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>killtranslation</tt></td></tr>
$table_tr<td colspan=2><tt> killtranslate&nbsp;</tt></td>
<td colspan=3> Reset translation to identity.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>lattice x0,y0,x1,y1,x2,y2,n1,n2,[color]</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> A lattice of n1xn2 points starting with (x0,y0), with n1 rows in direction of (x1,y1) and n2 rows in direction of (x2,y2).</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>levelcurve [color],expression,l1,l2,...</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> Draws level curves for expression, with levels l1, l2,...</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>levelstep n</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> Set the number of pixel steps in levelcurve plotting. Between 1 and 16, defaults to 4.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>line x1,y1,x2,y2,[color]</tt></td></tr>
$table_tr<td colspan=2><tt> seg segment&nbsp;</tt></td>
<td colspan=3> Line segment (x1,y1)---(x2,y2).</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>linear a,b,c,d</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> Make an linear transformation for the subsequent objets: (x;y) -> [a,b;c,d](x;y).</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>lines [color],x1,y1,x2,y2,x3,y3...</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> n line segments (x1,y1)---(x2,y2)---(x3,y3)...</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>linewidth w</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> Set line width to w (in pixels) for line drawing.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>multicopy n1,n2,...,nk, [filename]</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3>Copy the image [filename] in the parallelogram given by parallelogram command (with deformation) and apply to it the transformations n_1, ..., n_k (up to 19). If no n1 ... are given, all the transformations are applied. So setparallelogram and some setvector or setmatrix or settransform must be previously defined.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>new x,y</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> Set a new image of size x,y.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>output [filename]</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> Output the current image to [filename].</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>parallel x1,y1,x2,y2,xv,yv,n,[color]</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> n parallel lines starting from (x1,y1)---(x2,y2), with displacement (xv,yv).</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>pixels [color],x1,y1,x2,y2,...</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> Points (all of diameter 1) at (x1,y1), (x2,y2), ...</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>plot [color],[formula]</tt></td></tr>
$table_tr<td colspan=2><tt> curve&nbsp;</tt></td>
<td colspan=3> Plot a curve according to [formula] which can be either an explicit function of x, or a pair of parametric functions in t.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>plotjump j</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> Plotted curve will jump is two consecutive points have distance more than j pixels. Useful to avoid plotting discontinuous functions as continuous. Default value: 200.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>plotstep n</tt></td></tr>
$table_tr<td colspan=2><tt> plotsteps tstep tsteps&nbsp;</tt></td>
<td colspan=3> Set the number of point computations in curve plot. Defaults to 100.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>point x,y,[color]</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> A (fat) point at (x,y), whose diameter is equal to linewidth.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>points [color],x1,y1,x2,y2,...</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> (Fat) points at (x1,y1), (x2,y2), ..., whose diameters are equal to linewidth.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>poly [color],x1,y1,x2,y2,x3,y3...</tt></td></tr>
$table_tr<td colspan=2><tt> polygon&nbsp;</tt></td>
<td colspan=3> Polygon (x1,y1)-(x2,y2)-(x3,y3)...</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>range x1,x2,y1,y2</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> Set the drawing range to [x1,x2] horizontally and [y1,y2] vertically. Note that by default, horizontal range is [0,xsize-1] and vertical range is [ysize-1,0].</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>rays [color],x0,y0,x1,y1,x2,y2...</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> Line segments (x0,y0)---(x1,y1), (x0,y0)---(x2,y2), ...</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>rect x1,y1,x2,y2,[color]</tt></td></tr>
$table_tr<td colspan=2><tt> rectangle&nbsp;</tt></td>
<td colspan=3> Rectangle with corners (x1,y1) and (x2,y2).</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>resetmatrix n</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3>Reset n-th linear or affine transformation to identity.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>resetparallelogram</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3>kill setparallelogram</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>resetvector n</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3>Reset n-th translation to identity.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>resettransform n</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3>Reset n-th linear, affine transformation and n-th translation to initial values (identity or null vector).</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>rotation d</tt></td></tr>
$table_tr<td colspan=2><tt> rotate&nbsp;</tt></td>
<td colspan=3> Make a rotation of degree d counter-clockwise (centered at (0,0)), for the subsequent objets.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>setbrush [filename]</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> Use the image [filename] as a brush for all line draws.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>setpixel x,y,[color]</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> A point (of diameter 1 pixel) at (x,y).</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>setstyle [color1],[color2],...</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> Set the line style to color1,color2,...</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>setmatrix n,a,b,c,d</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3>Make the n-th linear transformation for multicopy objects: (x;y) -> [a,b;c,d](x;y).</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>setparallelogram xs,yz,xu,yu,xv,yv</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3>Prepare the place where the image will be copied by multicopy (mathematical coordinates) : xs,ys mathematical coordinates of the origin point, xu,yu mathematical coordinates of the "horizontal line of the image" to copy, xv,yv mathematical coordinates of the "verticale line of the image" to copy.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>settile [filename]</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> Use the image [filename] as a tile for all filling commands.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>settransform n,a,b,c,d,tx,ty</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3>Make the n-th linear transformation for multicopy objects: (x;y) -> [a,b;c,d](x;y) + (tx;ty). (settransform n,a,b,c,d,tx,ty is equivalent to setmatrix n,a,b,c,d and setvector n,tx,ty, so it kills a previous definition setmatrix n,a,b,c,d with the  same number n).</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>setvector n,tx,ty</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3>Make the n-th translation for multicopy objects: (x;y) -> (tx,ty).</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>size x,y</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> Set the image size to x pixels horizontally and y pixels vertically.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>square x,y,s,[color]</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> Square with sides s (in pixels) and first corner at (x,y).</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>text [color],x,y,[font],[string]</tt></td></tr>
$table_tr<td colspan=2><tt> print string write&nbsp;</tt></td>
<td colspan=3> Write the string at (x,y), with font=small,medium,large or giant.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>textup [color],x,y,[font],[string]</tt></td></tr>
$table_tr<td colspan=2><tt> stringup writeup&nbsp;</tt></td>
<td colspan=3> Write upwards the string at (x,y), with font=small,medium,large or giant.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>trange t1,t2</tt></td></tr>
$table_tr<td colspan=2><tt> ranget&nbsp;</tt></td>
<td colspan=3> Set the t range to [t1,t2] for parametric curve plotting. Defaults to [0,1].</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>translation tx,ty</tt></td></tr>
$table_tr<td colspan=2><tt> translate&nbsp;</tt></td>
<td colspan=3> Make an translation for the subsequent objets: (x;y) -> (x;y)+(tx;ty).</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>transparent [color]</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> Makes [color] a transparent color.</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>triangle x1,y1,x2,y2,x3,y3,[color]</tt></td></tr>
$table_tr<td colspan=2><tt>&nbsp;</tt></td>
<td colspan=3> Triangle with vertices (x1,y1),(x2,y2),(x3,y3).</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>vline x,y,[color]</tt></td></tr>
$table_tr<td colspan=2><tt> verticalline&nbsp;</tt></td>
<td colspan=3> Vertical line through (x,y).</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>xrange x1,x2</tt></td></tr>
$table_tr<td colspan=2><tt> rangex&nbsp;</tt></td>
<td colspan=3> Set the horizontal drawing range to [x1,x2]. Defaults to [0,xsize-1].</td></tr><tr><td colspan=5></td></tr>
$table_tr<td colspan=5 nowrap><tt>yrange y1,y2</tt></td></tr>
$table_tr<td colspan=2><tt> rangey&nbsp;</tt></td>
<td colspan=3> Set the horizontal drawing range to [y1,y2]. Defaults to [ysize-1,0].</td></tr><tr><td colspan=5></td></tr>
$table_end<p>
