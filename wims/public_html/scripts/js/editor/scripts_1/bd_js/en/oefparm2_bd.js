<!-- Automatically generated by bin/oefdoc.pl -->
var oefparm2name= 'Data and list manipulation';
 var oefparm2= [ 'items( )', 'item( )', 'item( .. , )', 'item([ , ], )', 'position( )', 'rows( )', 'row( , )', 'row( .. , )', 'row([ , ], )', 'row(   , )', 'randomitem( )', 'randomrow( )', 'column( , )', 'column( .. , )', 'column([ , ], )', 'asis( )', 'htmlmath( )', 'texmath( )' ];
function oefparm2fun(instruction){
    switch(instruction)
	{
	case 'items( )' :
chaine_aide='<div class="syntax"><div class="title">Syntaxe</div><code>items(a,b,c,d,e,f)</code></div>'+
'<div class="explication"><div class="title">Explication</div>the number of items (here it\'s 6) in the list {a,b,c,d,e,f}</div>'+
'' ; return chaine_aide;
	   break;
	////******************** 

	case 'item( )' :
chaine_aide='<div class="syntax"><div class="title">Syntaxe</div><code>item(3,a,b,c,d,e,f)</code></div>'+
'<div class="explication"><div class="title">Explication</div>item number 3 of the list {a,b,c,d,e,f} (hence c) ; <tt>item(3,\\ll)</tt> is the item number 3 of the list \\ll (same as <tt>\\ll[3]</tt>)</div>'+
'' ; return chaine_aide;
	   break;
	////******************** 

	case 'item( .. , )' :
chaine_aide='<div class="syntax"><div class="title">Syntaxe</div><code>item(2..5,a,b,c,d,e,f)</code></div>'+
'<div class="explication"><div class="title">Explication</div>items number 2 to 5 of the list {a,b,c,d,e,f} (hence b,c,d,e)</div>'+
'' ; return chaine_aide;
	   break;
	////******************** 

	case 'item([ , ], )' :
chaine_aide='<div class="syntax"><div class="title">Syntaxe</div><code>item([2,4],\\ll)</code></div>'+
'<div class="explication"><div class="title">Explication</div>items number 2 and 4 of the list \\ll (same as <tt>\\ll[2,4]</tt>)</div>'+
'' ; return chaine_aide;
	   break;
	////******************** 

	case 'position( )' :
chaine_aide='<div class="syntax"><div class="title">Syntaxe</div><code>position(make,do,go,make,take)</code></div>'+
'<div class="explication"><div class="title">Explication</div>number of position of the item `make\' in the list {do,go,make,take} (hence 3)</div>'+
'' ; return chaine_aide;
	   break;
	////******************** 

	case 'rows( )' :
chaine_aide='<div class="syntax"><div class="title">Syntaxe</div><code>rows(\\m)</code></div>'+
'<div class="explication"><div class="title">Explication</div>the number of rows in the matrix \\m</div>'+
'' ; return chaine_aide;
	   break;
	////******************** 

	case 'row( , )' :
chaine_aide='<div class="syntax"><div class="title">Syntaxe</div><code>row(2,\\m)</code></div>'+
'<div class="explication"><div class="title">Explication</div>row number 2 of the matrix \\m (same as <tt>\\m[2;]</tt>)</div>'+
'' ; return chaine_aide;
	   break;
	////******************** 

	case 'row( .. , )' :
chaine_aide='<div class="syntax"><div class="title">Syntaxe</div><code>row(2..5,\\m)</code></div>'+
'<div class="explication"><div class="title">Explication</div>the submatrix of \\m consisting of rows number 2 to 5 (same as <tt>\\m[2..5;]</tt>)</div>'+
'' ; return chaine_aide;
	   break;
	////******************** 

	case 'row([ , ], )' :
chaine_aide='<div class="syntax"><div class="title">Syntaxe</div><code>row([1,3],1,2,3<br>3,4,5<br>5,6,7) </code></div>'+
'<div class="explication"><div class="title">Explication</div>the submatrix of the 3&times;3 matrix consisting of the first  and the last rows</div>'+
'' ; return chaine_aide;
	   break;
	////******************** 

	case 'row(   , )' :
chaine_aide='<div class="syntax"><div class="title">Syntaxe</div><code>row(column 1 > 1 and column 2 = good,\\mat)</code></div>'+
'<div class="explication"><div class="title">Explication</div>the submatrix of \\mat consisting of rows where column 1 is > 1 and column 2 is the word `good\'</div>'+
'' ; return chaine_aide;
	   break;
	////******************** 

	case 'randomitem( )' :
chaine_aide='<div class="syntax"><div class="title">Syntaxe</div><code>randomitem(\\list)</code></div>'+
'<div class="explication"><div class="title">Explication</div>a random item of (comma-separated) \\list.</div>'+
'' ; return chaine_aide;
	   break;
	////******************** 

	case 'randomrow( )' :
chaine_aide='<div class="syntax"><div class="title">Syntaxe</div><code>randomrow(\\mat)</code></div>'+
'<div class="explication"><div class="title">Explication</div>a random row of the matrix \\mat.</div>'+
'' ; return chaine_aide;
	   break;
	////******************** 

	case 'column( , )' :
chaine_aide='<div class="syntax"><div class="title">Syntaxe</div><code>column(2,\\m)</code></div>'+
'<div class="explication"><div class="title">Explication</div>items of column number 2 of the matrix \\m, as a comma-separated list (same as <tt>\\m[;2]</tt>)</div>'+
'' ; return chaine_aide;
	   break;
	////******************** 

	case 'column( .. , )' :
chaine_aide='<div class="syntax"><div class="title">Syntaxe</div><code>column(2..5,\\m)</code></div>'+
'<div class="explication"><div class="title">Explication</div>the submatrix of \\m consisting of columns number 2 to 5 (same as <tt>\\m[;2..5]</tt>)</div>'+
'' ; return chaine_aide;
	   break;
	////******************** 

	case 'column([ , ], )' :
chaine_aide='<div class="syntax"><div class="title">Syntaxe</div><code>column([1,3],1,2,3<br>3,4,5<br>5,6,7)</code></div>'+
'<div class="explication"><div class="title">Explication</div>the submatrix of the 3&times;3 matrix consisting of the first  and the last columns</div>'+
'' ; return chaine_aide;
	   break;
	////******************** 

	case 'asis( )' :
chaine_aide='<div class="syntax"><div class="title">Syntaxe</div><code>asis(How do you do? item(1,2,3))</code></div>'+
'<div class="explication"><div class="title">Explication</div>the string as it is, protected from transformations and conditionality.</div>'+
'' ; return chaine_aide;
	   break;
	////******************** 

	case 'htmlmath( )' :
chaine_aide='<div class="syntax"><div class="title">Syntaxe</div><code>htmlmath(2*x^2+3*x)</code></div>'+
'<div class="explication"><div class="title">Explication</div>the best possible way to render the expressionin html way: 2x<sup>2</sup>+3x</div>'+
'' ; return chaine_aide;
	   break;
	////******************** 

	case 'texmath( )' :
chaine_aide='<div class="syntax"><div class="title">Syntaxe</div><code>texmath(2*x^2+3*x)</code></div>'+
'<div class="explication"><div class="title">Explication</div>the TeX source of the expression</div>'+
'' ; return chaine_aide;
	   break;
	////******************** 

	
	}
}