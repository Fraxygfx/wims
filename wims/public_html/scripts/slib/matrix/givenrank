!if $wims_read_parm!=slib_header
 !goto proc
!endif
slib_title=Generates a random matrix of given rank
slib_parms=5\
3,number of rows\
3,number of columns\
2,the given rank\
3,coefficient range\
Z,coefficient ring: Z for the time being, or G (Gauss ring)
slib_author=Gang Xiao
slib_out=the generated matrix
slib_example=3,5,1,5
!exit

:proc
!distribute items $wims_read_parm into slib_row,slib_col,slib_rank,slib_range,slib_ring
!default slib_ring=Z
!bound slib_row between integer 1 and 20 default 2
!bound slib_col between integer 1 and 20 default 2
slib_sizemin=$[min($slib_row,$slib_col)]
!bound slib_rank between integer 1 and $slib_sizemin
!bound slib_range between integer 1 and 1000000 default 2

!if $slib_ring=Z
 slib_sh1=!shuffle $slib_rank
 slib_sh2=!shuffle $slib_col
 slib_ran1=(random($slib_range)*(2*random(2)-1))
 slib_ran2=(2*random(2)-1)
 slib_coefu=if(x==y,$slib_ran2,if(x<y,0,$slib_ran1))
 slib_coefd=if(x==y,$slib_ran2,if(x>y,0,$slib_ran1))
 slib_triu=matrix($slib_row,$slib_rank,x,y,$slib_coefu)
 slib_trid=vecextract(matrix($slib_rank,$slib_col,x,y,$slib_coefd),[$slib_sh1],[$slib_sh2])
 slib_out=!exec pari print($slib_triu*$slib_trid)
 !exit
!endif

